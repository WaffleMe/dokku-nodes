#!/bin/bash
set -e;

APP_ROOT="/home/git"

# Check if name is specified
if [[ $1 == nodes ]] || [[ $1 == nodes:* ]]; then
  if [[ -z $2 ]]; then
    echo "You must specify an app name"
    exit 1
  else
    APP="$2"
    ENV_FILE="$APP_ROOT/$APP/NODES"
    # Check if app exists with the same name
    if [[ $1 != "nodes:internal:deploy" ]]; then
      if [ ! -d "$APP_ROOT/$APP" ]; then
        echo "$APP does not exist"
        exit 1
      fi
    fi
  fi
fi

styled_hash () {
  vars=`echo -e "$1"`

  longest=""
  for word in $vars; do
    KEY=`echo $word | cut -d"=" -f1`
    if [ ${#KEY} -gt ${#longest} ]; then
      longest=$KEY
    fi
  done

  for word in $vars; do
    KEY=`echo $word | cut -d"=" -f1`
    VALUE=`echo $word | cut -d"=" -f2-`

    num_zeros=$((${#longest} - ${#KEY}))
    zeros=" "
    while [ $num_zeros -gt 0 ]; do
      zeros="$zeros "
      num_zeros=$(($num_zeros - 1))
    done
    echo "$KEY:$zeros$VALUE"
  done
}

nodes_restart_app() {
  APP="$1"; IMAGE="app/$APP"

  echo "-----> Releasing $APP ..."
  dokku release $APP $IMAGE
  echo "-----> Release complete!"
  echo "-----> Deploying $APP ..."
  dokku deploy $APP $IMAGE
  echo "-----> Deploy complete!"
}

case "$1" in

  nodes)
    APP="$2"

    if [ ! -f $ENV_FILE ] || [ ! -s $ENV_FILE ] ; then
      echo "$APP has no nodes vars"
      exit 1
    fi

    VARS=`cat $ENV_FILE | grep -Eo "export ([a-zA-Z_][a-zA-Z0-9_]*=.*)" | cut -d" " -f2`

    for var in "$@"; do
      if [[ "$var" == "--shell" ]]; then
        cat $ENV_FILE
        exit 0
      fi
    done

    echo "=== $APP Config Vars"
    styled_hash "$VARS"
  ;;

  nodes:get)
    if [[ -z $3 ]]; then
      echo "Usage: dokku nodes:get APP KEY"
      echo "Must specify KEY."
      exit 1
    fi

    if [ ! -f $ENV_FILE ] || [ ! -s $ENV_FILE ] ; then
      exit 1
    fi

    KEY="$3"

    cat $ENV_FILE | grep -Eo "export ([a-zA-Z_][a-zA-Z0-9_]*=.*)" | cut -d" " -f2 | grep -Eo "^$KEY$" | cut -d"=" -f2-
  ;;

  nodes:set)
    if [[ -z "${*:3}" ]]; then
      echo "Usage: dokku nodes:set APP KEY1=VALUE1 [KEY2=VALUE2 ...]"
      echo "Must specify KEY and VALUE to set."
      exit 1
    fi
    APP="$2"; APP_DIR="$APP_ROOT/$APP"
    ENV_ADD=""
    ENV_TEMP=`cat "${ENV_FILE}"`
    # disabling requirement for app to be running to set nodes
#    ID=$(< "$APP_DIR/CONTAINER")
    # disabling restart for now
    RESTART=false
    VARS="${*:3}"
    for var in $VARS; do
      KEY=`echo ${var} | cut -d"=" -f1`
      VALUE=`echo ${var} | cut -d"=" -f2-`
      if [[ $KEY == [a-zA-Z_][a-zA-Z0-9_]* ]] && [ ${#VALUE} -gt 0 ]; then
        RESTART_APP=false
        ENV_TEMP=$(echo -e "${ENV_TEMP}" | sed "/^$KEY=/ d")
        ENV_TEMP="${ENV_TEMP}\n${var}"
        ENV_ADD=$(echo -e "${ENV_ADD}" | sed "/^$KEY=/ d")
        ENV_ADD="${ENV_ADD}\n${var}"
      fi
    done
    echo "-----> The following commands need to be run on the primary build box"
    for var in $VARS; do
      KEY=`echo ${var} | cut -d"=" -f1`
      VALUE=`echo ${var} | cut -d"=" -f2-`
      if [[ $KEY == [a-zA-Z_][a-zA-Z0-9_]* ]] && [ ${#VALUE} -gt 0 ]; then
        echo "su - git -c \"cat $APP_ROOT/.ssh/id_rsa.pub | ssh root@$VALUE sshcommand acl-add git git-user\""
      fi
    done

    if [ $RESTART_APP ]; then
      echo "-----> Setting nodes vars and restarting $APP"
      styled_hash "$ENV_ADD"

      echo -e "$ENV_TEMP" | sed '/^$/d' | sort > $ENV_FILE
      nodes_restart_app $APP
    fi
  ;;

  nodes:unset)
    if [[ -z $3 ]]; then
      echo "Usage: dokku nodes:unset APP KEY1 [KEY2 ...]"
      echo "Must specify KEY to unset."
      exit 1
    fi

    APP="$2"; APP_DIR="$APP_ROOT/$APP"
    ENV_TEMP=`cat "${ENV_FILE}"`
    ID=$(< "$APP_DIR/CONTAINER")
    VARS="${*:3}"

    for var in $VARS; do
      echo "-----> Unsetting $var and restarting $APP"
      ENV_TEMP=$(echo -e "${ENV_TEMP}" | sed "/^$var=/ d")

      echo -e "$ENV_TEMP" | sed '/^$/d' | sort > $ENV_FILE
      nodes_restart_app $APP
    done
  ;;

  nodes:internal:deploy)
    echo "nodes:internal:deploy"
    APP="$2"; PORT="$3"; PROC_TYPE=${4-web}; PROCESSES=${5-1}; APP_DIR="$APP_ROOT/$APP";

    if [[ ! -d "$APP_DIR" ]]; then
      mkdir $APP_DIR
      echo $PORT > $APP_DIR/PORT
      echo $PROC_TYPE > $APP_DIR/PROCTYPE
    fi

    docker pull localhost:5000/appl/$APP
    IMAGE="app/$APP"
    docker tag localhost:5000/appl/$APP $IMAGE

    image_id=$(docker images -q $IMAGE)
    echo "Starting $PROCESSES '$PROC_TYPE' process container(s)."
    for i in `seq 1 $PROCESSES`; do
      docker run -d -e "NODES_IMAGE=$image_id" -p "$PORT" $IMAGE /bin/bash -c "/start $PROC_TYPE" > /dev/null
    done

    # don't see a reason for this at this time
    #pluginhook post-deploy $APP $PORT

    # stop any nodes started containers from previous deployments
    running_containers=$(docker ps -q)
    for running_container in $running_containers; do
      # find nodes-generated containers
      if docker inspect $running_container | grep -q "NODES_IMAGE="; then
        # filter out any nodes that we created with the current app image
        if ! docker inspect $running_container | grep -q "NODES_IMAGE=$image_id"; then
          echo "Stopping existing nodes container... $running_container"
          docker stop -t 10 $running_container > /dev/null
        fi
      fi
    done
  ;;

  help)
    cat && cat<<EOF
    nodes <app>                                    display the nodes vars for an app
    nodes:get <app> KEY                            display a nodes value for an app
    nodes:set <app> KEY1=VALUE1 [KEY2=VALUE2 ...]  set one or more nodes vars
    nodes:unset <app> KEY1 [KEY2 ...]              unset one or more nodes vars
EOF
  ;;

esac
